---
import Layout from '../layouts/Layout.astro';

const res = await fetch("https://mixmixmix.ch/wp-json/wp/v2/posts/?per_page=100");
const posts_raw = await res.json();

const posts = posts_raw
  .filter((post: any) => post.class_list && post.class_list[post.class_list.length - 1] !== 'category-event');

// Fetch featured images for each post
const postsWithImages = await Promise.all(
  posts.map(async (post: any) => {
    let featuredImage = null;
    if (post.featured_media) {
      try {
        const mediaRes = await fetch(`https://mixmixmix.ch/wp-json/wp/v2/media/${post.featured_media}`);
        const media = await mediaRes.json();
        featuredImage = media.source_url;
      } catch (error) {
        console.log('Error fetching media:', error);
      }
    }
    return { ...post, featuredImage };
  })
);

// Simple hash function for consistent pseudorandom positions
function hashString(str: string): number {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  return Math.abs(hash);
}

// Generate consistent pseudorandom positions based on post ID
const randomPositions = postsWithImages.map((post: any) => {
  const seed = hashString(post.id.toString() + post.title.rendered);
  const x = ((seed % 400) - 50); // Range: -200 to 200
  const y = (((seed >> 8) % 200) - 100); // Range: -100 to 100
  return { x, y };
});
---

<Layout>
    <!-- Navigation -->

    <!-- Main content area -->
    <main class="flex items-center justify-center">
      <div class="text-center w-full relative">
        <!-- Project list -->
          {postsWithImages.map((post: any, index: number) => (
              <div class="project-item group" data-project-category={post.class_list.pop()} data-project-id={post.id}>
                <h2 id={post.id} class="select-none transition-colors text-3xl sm:text-4xl md:text-6xl lg:text-8xl"> {/* aria-expanded:color-[var(--c-highlight)] */}
                  {post.title.rendered}
                </h2>
                <!-- Expandable content that folds under title -->
                <div class="project-content max-h-0 overflow-hidden transition-all duration-500 ease-in-out opacity-0">
                  <div class="py-8 px-4 text-sm md:text-base max-w-2xl mx-auto">
                    <!-- Featured image -->
                    {/* {post.featuredImage && (
                      <div class="mb-6">
                        <img 
                          src={post.featuredImage} 
                          alt={post.title.rendered}
                          class="w-full max-w-md mx-auto"
                        />
                      </div>
                    )} */}
                    
                    <!-- metadata -->
                    {post.date && (
                      <div class="mb-6">
                        <p>{new Date(post.date).getFullYear()}</p>
                        {post.acf?.details ? (
                            <p>{post.acf?.details}{post.acf?.location && (<span>, {post.acf?.location}</span>)}</p>
                        ) : (
                          <p>{post.acf?.location}</p>
                        )}
                      {post.acf?.link && (
                          <a href={post.acf.link} target="_blank">
                            Link
                          </a>
                      )}
                      </div>
                    )}
                    
                    <!-- Post content -->
                    <div class="prose prose-sm font-normal" set:html={post.content.rendered} />
                    
                  </div>
                </div>
                <!-- Project image preview - appears on hover at pseudorandom position -->
                <div 
                  class="absolute opacity-0 not-group-has-aria-expanded:group-hover:opacity-90 transition-opacity duration-100 hidden lg:block z-50"
                  style={`transform: translate(${randomPositions[index].x}px, ${randomPositions[index].y}px);`}
                >
                  <div class="w-48 h-64">
                    {post.featuredImage && (
                      <img 
                        src={post.featuredImage} 
                        alt={post.title.rendered}
                        class="w-full h-full object-cover filter-[var(--image-filters)]"
                      />
                    )}
                    <div class="absolute inset-0 bg-[var(--c-verlauf)] mix-blend-hard-light opacity-60"></div>
                  </div>
                </div>
              </div>
              
          ))}
      </div>
    </main>


</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    
    const projectItems = document.querySelectorAll('.project-item');
    
    projectItems.forEach(item => {
      const title = item.querySelector('h2');
      if (window.location.hash.length) {
        const hash = window.location.hash.substring(1); // Remove the #
        if (hash == title?.id) {
          const content = item.querySelector('.project-content');
          if (content) {
            content.classList.remove('max-h-0', 'opacity-0');
            title.classList.add('invert')
          }
        }
      }
      const content = item.querySelector('.project-content');
      const closeBtn = item.querySelector('.close-btn');
      
      title?.addEventListener('click', () => {
        /* 
        // Close all other open projects
        projectItems.forEach(otherItem => {
          const otherTitle = otherItem.querySelector('h2');
          if (otherItem !== item) {
            const otherContent = otherItem.querySelector('.project-content');
            if (otherContent) {
              otherTitle!.ariaExpanded = 'false';
              otherContent.classList.add('max-h-0', 'opacity-0');
            }
          }
        });
        */
        
        // Toggle current project
        if (content) {
          if (content.classList.contains('max-h-0')) {
            title.ariaExpanded = 'true';
            content.classList.remove('max-h-0', 'opacity-0');
          } else {
            title.ariaExpanded = 'false';
            content.classList.add('max-h-0', 'opacity-0');
          }
        }
      });
      
      closeBtn?.addEventListener('click', (e) => {
        e.stopPropagation();
        if (content) {
          title!.ariaExpanded = 'false';
          content.classList.add('max-h-0', 'opacity-0');
        }
      });
    });
  });

  // handle categoryworks events
  window.addEventListener('categoryWorks', (event) => {
    const category = `category-${(event as CustomEvent).detail.category}`;

    document.querySelectorAll('.project-item').forEach(item => {
      if (category === 'category-all') {
        item.classList.remove('hidden');
        return;
      }
      const projectCat = item.getAttribute('data-project-category') || 'all';
      if (projectCat === category) {
        item.classList.remove('hidden');
      } else {
        item.classList.add('hidden');
      }
    });

  });
</script>
