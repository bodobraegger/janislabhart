---
import Layout from '../layouts/Layout.astro';

const res = await fetch("https://api.janislabhart.ch/wp-json/wp/v2/posts/?per_page=100");
const posts_raw = await res.json();

const posts = posts_raw
    .filter((post: any) => post.class_list && post.class_list[post.class_list.length - 1] !== 'category-event')
    .map((post: any) => {
        // Extract figures using regex
        const figureRegex = /<figure[^>]*>.*?<\/figure>/gs;
        const figures = post.content.rendered.match(figureRegex) || [];

        // Filter figures to only include those with imagery (exclude audio)
        const filteredFigures = figures.filter(figureHtml => {
            return !figureHtml.includes('<audio');
        });

        let editedFigures: string[] = [];

        let cleanContent = post.content.rendered;
        
        filteredFigures.forEach(iframeHtml => {
        // Remove iframe figures from content
        cleanContent = cleanContent.replace(iframeHtml, '');
        // remove width and height attributes from iframes
        iframeHtml = iframeHtml.replace(/width="\d+"\s*height="\d+"/, '');
        // remove <div class="wp-block-embed__wrapper">
        iframeHtml = iframeHtml.replace(/<div class="wp-block-embed__wrapper">/, '');
        // remove </div>
        iframeHtml = iframeHtml.replace(/<\/div>/, '');
        // Add iframe to figures
        editedFigures.push(iframeHtml);
        });
        

        // Remove only image figures from content (keep audio/iframe figures)
        editedFigures.forEach(figureHtml => {
            cleanContent = cleanContent.replace(figureHtml, '');
        });

        return {
            ...post,
            content: {
                ...post.content,
                rendered: cleanContent,
                figures: editedFigures
            }
        };
    });

// Fetch featured images for each post
const postsWithImages = await Promise.all(
  posts.map(async (post: any) => {
    let featuredImage = null;
    if (post.featured_media) {
      try {
        const mediaRes = await fetch(`https://api.janislabhart.ch/wp-json/wp/v2/media/${post.featured_media}`);
        const media = await mediaRes.json();
        featuredImage = media.source_url;
      } catch (error) {
        console.log('Error fetching media:', error);
      }
    }
    return { ...post, featuredImage };
  })
);

const postsWithImagesSorted = postsWithImages.sort((a: any, b: any) => {
  // Sort by alpha-numeric order of slug, they are enforced to be unique
  const slugA = a.slug.toLowerCase();
  const slugB = b.slug.toLowerCase();
  if (slugA < slugB) return -1;
  else return 1;
});

// Simple hash function for consistent pseudorandom positions
function hashString(str: string): number {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  return Math.abs(hash);
}

// Generate consistent pseudorandom positions based on post ID
const randomPositions = postsWithImagesSorted.map((post: any) => {
  const seed = hashString(post.slug.toString() + post.title.rendered);
  const x = ((seed % 200) - 100); // Range: -100 to 100
  const y = (((seed >> 8) % 200) - 200); // Range: -100 to 0
  return { x, y };
});
---

<Layout title="Works">
    <main class="flex items-center justify-center">
      <div class="text-center w-full relative">
        <!-- Project list -->
          {postsWithImagesSorted.map((post: any, index: number) => (
              <div class="project-item group" data-project-category={post.class_list.pop()} data-project-id={post.slug}>
                <h2 id={post.slug} class="peer select-none transition-all text-5xl md:text-9xl"> {/* aria-expanded:color-[var(--c-highlight)] */}
                  {post.title.rendered}
                </h2>
                <!-- Project image preview - appears on hover at pseudorandom position -->
                <div 
                  class="preview-image absolute opacity-0 not-group-has-aria-expanded:peer-hover:opacity-90 transition-opacity hidden lg:block z-10"
                  style={`transform: translate(calc(${randomPositions[index].x}px), calc(${randomPositions[index].y}px - 50%));`}
                >
                  <div class="w-48 h-64">
                    {post.featuredImage && (
                      <img 
                        src={post.featuredImage}
                        alt={post.title.rendered}
                        class="w-full h-full object-cover filter-[var(--image-filters)]"
                      />
                    )}
                    <div class="absolute inset-0 bg-[var(--c-img-filter)] mix-blend-hard-light opacity-100"></div>
                  </div>
                </div>

                <!-- Expandable content that folds under title -->
                <div class="project-content max-h-0 overflow-hidden transition-all opacity-0">
                  <div class="px-8 py-8">
                    <!-- Featured image -->
                    {/* {post.featuredImage && (
                      <div class="mb-6">
                        <img 
                          src={post.featuredImage} 
                          alt={post.title.rendered}
                          class="w-full max-w-md mx-auto"
                        />
                      </div>
                    )} */}
                    
                    <!-- metadata -->
                    {post.date && (
                      <div class="mb-6">
                        <p>{new Date(post.date).getFullYear()}</p>
                        {post.acf?.details ? (
                            <p>{post.acf?.details}{post.acf?.location && (<span>, {post.acf?.location}</span>)}</p>
                        ) : (
                          <p>{post.acf?.location}</p>
                        )}
                      {post.acf?.link && (
                          <a href={post.acf.link} target="_blank">
                            Link
                          </a>
                      )}
                      </div>
                    )}
                    
                    <!-- Post content -->
                    <div class="prose prose-sm font-normal max-w-7xl mx-auto"> 
                      <div class="content" set:html={post.content.rendered} />
                      <div class="figures">
                        {post.content.figures.map((figure: string) => (
                          <Fragment set:html={figure} />
                        ))}
                      </div>
                    </div>
                    
                  </div>
                </div>
              </div>
              
          ))}
      </div>
    </main>


</Layout>

<script>
function toggleProjectExpand(content: Element, title: Element) {
    if (content.classList.contains('max-h-0')) {
        title.ariaExpanded = 'true';
        content.classList.remove('max-h-0', 'opacity-0');
    } else {
        closeProject(content, title);
    }
}

function closeProject(content: Element, title: Element) {
    title.ariaExpanded = 'false';
    content.classList.add('max-h-0', 'opacity-0');
}

function expandByHash(item: Element) {
    const title = item.querySelector('h2');
    if (window.location.hash.length) {
        const hash = window.location.hash.substring(1); // Remove the #
        if (hash == title?.id) {
            const content = item.querySelector('.project-content');
            toggleProjectExpand(content!, title!);
        }
    }
}
window.addEventListener('hashchange', () => {
    const projectItems = document.querySelectorAll('.project-item');
    projectItems.forEach(item => {
        expandByHash(item);
    });
});

document.addEventListener('DOMContentLoaded', () => {
    const projectItems = document.querySelectorAll('.project-item');
    projectItems.forEach(item => {
        expandByHash(item);
        const title = item.querySelector('h2');
        
        const content = item.querySelector('.project-content');
        const closeBtn = item.querySelector('.close-btn');
        
        title?.addEventListener('click', () => {
            /* 
            // Close all other open projects
            projectItems.forEach(otherItem => {
                const otherTitle = otherItem.querySelector('h2');
                if (otherItem !== item) {
                    const otherContent = otherItem.querySelector('.project-content');
                    closeProject(otherContent!, otherTitle!);
                }
            });
            */
        
            // Toggle current project
            toggleProjectExpand(content!, title!);
        });
        
        closeBtn?.addEventListener('click', (e) => {
            e.stopPropagation();
            close
        });
    });
    const figures = document.querySelectorAll('.prose figure');
    figures.forEach(figure => {
        figure.addEventListener('click', (e) => {
            figure.classList.add('clicked');
        });
    });
});

// handle categoryworks events
window.addEventListener('categoryWorks', (event) => {
    const category = `category-${(event as CustomEvent).detail.category}`;

    document.querySelectorAll('.project-item').forEach(item => {
        // collapse all items
        const content = item.querySelector('.project-content');
        const title = item.querySelector('h2');
        closeProject(content!, title!);
        if (category === 'category-all') {
            item.classList.remove('hidden');
            return;
        }
        const projectCat = item.getAttribute('data-project-category') || 'all';
        if (projectCat === category) {
            item.classList.remove('hidden');
        } else {
            item.classList.add('hidden');
        }
    });

});
</script>
