---
const { initialDrone, soundUrls = [], cursors = [] } = Astro.props;
---

<div class="clickSounds fixed top-0 right-0 p-4 text-xs md:text-sm z-20 select-none">
    <input type="radio" id="sound-toggle"></input>
    <label for="sound-toggle">CLICK ;)</label>
</div>

<!-- Cursor follower -->
<div id="cursor-follower" class="fixed pointer-events-none mix-blend-multiply z-50 opacity-0 transition-opacity duration-200">
    <img id="cursor-image" src="" alt="" class="w-8 h-8 object-contain">
</div>

<script define:vars={{ soundUrls, cursors, initialDrone }}>
    let audioElements = [];
    let droneAudio = null;
    let playingAudios = []; // Track multiple playing sounds
    let soundEnabled = false;
    let currentSoundIndex = -1;
    let currentCursorIndex = -1;
    let cursorFollower = null;
    let cursorImage = null;
    let isFollowing = true;
    let droneHasPlayed = false;

    function shuffle(theArray) {
        var tmp;
        for (var i = 0; i < theArray.length; i++) {
            var j = Math.floor(Math.random() * theArray.length);
            tmp = theArray[i];
            theArray[j] = theArray[i];
            theArray[i] = tmp;
        }
        return theArray;
    }

    function updateCursorPosition(e) {
        if (cursorFollower && isFollowing) {
            cursorFollower.style.left = e.clientX + 'px';
            cursorFollower.style.top = e.clientY + 'px';
            cursorFollower.style.transform = 'translate(-90%, -90%)';
        }
    }

    function showCursor() {
        if (!cursors || cursors.length === 0) return;

        currentCursorIndex = (currentCursorIndex + 1) % cursors.length;
        const cursor = cursors[currentCursorIndex];
        
        if (cursorImage && cursorFollower) {
            cursorImage.src = cursor.source_url;
            cursorFollower.classList.remove('opacity-0');
            cursorFollower.classList.add('opacity-100');
        }
    }

    function hideCursor() {
        if (cursorImage && cursorFollower) {
            cursorFollower.classList.remove('opacity-100');
            cursorFollower.classList.add('opacity-0');
            cursorImage.src = null;
        }
    }

    function playInitialDrone() {
        if (!initialDrone || droneHasPlayed) {
            console.log('No drone or already played');
            return;
        }
        
        droneAudio = new Audio(initialDrone);
        droneAudio.volume = 0.6;
        droneAudio.play().then(() => {
            console.log('Drone started playing');
        }).catch((error) => {
            console.log("Drone audio play failed:", error);
        });
        
        droneHasPlayed = true;
        
        droneAudio.addEventListener("ended", () => {
            console.log('Drone finished');
            droneAudio = null;
        });
    }

    document.addEventListener("DOMContentLoaded", () => {
        // Debug logging
        // console.log('Initial drone:', initialDrone);
        // console.log('Sound URLs:', soundUrls);
        // console.log('Cursors:', cursors);

        // Get cursor elements
        cursorFollower = document.getElementById('cursor-follower');
        cursorImage = document.getElementById('cursor-image');
 
        // Create audio elements from the server-side soundUrls
        if (soundUrls && soundUrls.length > 0) {
            shuffle(soundUrls);
            audioElements = soundUrls.map((url) => {
                // console.log('Creating audio element for:', url);
                const audio = new Audio(url);
                audio.volume = 0.7;
                return audio;
            });
        }

        if (cursors && cursors.length > 0) {
            shuffle(cursors);
        }

        const soundToggle = document.getElementById("sound-toggle");

        soundToggle?.addEventListener("click", (e) => {
            e.stopPropagation();
            soundEnabled = !soundEnabled;
            document.querySelector('#sound-toggle ~ label').textContent = soundEnabled ? "CLICK ;(" : "CLICK ;)";
            soundToggle.checked = soundEnabled;
            
            if (soundEnabled) {
                showCursor();
                playInitialDrone();
            } else {
                hideCursor();
                // Stop all sounds
                if (droneAudio) {
                    droneAudio.pause();
                    droneAudio.currentTime = 0;
                }
                playingAudios.forEach(audio => {
                    audio.pause();
                    audio.currentTime = 0;
                });
                playingAudios = [];
                droneHasPlayed = false;
            }
        });

        // Add mouse move listener
        document.addEventListener('mousemove', updateCursorPosition);

        document.addEventListener("click", (e) => {
            if (!soundEnabled || audioElements.length === 0) return;
            
            // Ignore clicks on links or buttons
            if (
                e.target.tagName === "A" ||
                e.target.tagName === "BUTTON" ||
                e.target.tagName === "INPUT" ||
                e.target.tagName === "LABEL" ||
                e.target.closest("a") ||
                e.target.closest("button") ||
                e.target.closest("input") ||
                e.target.closest("label")
            ) {
                return;
            }

            playSound();
            showCursor();
        });
    });

    function playSound() {
        if (audioElements.length === 0) {
            console.warn('No audio elements available');
            return;
        }
        
        // Remove finished sounds from playing list
        playingAudios = playingAudios.filter(audio => !audio.ended);
        
        // Only allow up to 4 sounds playing at once
        if (playingAudios.length >= 4) {
            const oldestAudio = playingAudios.shift();
            oldestAudio.pause();
            oldestAudio.currentTime = 0;
        }
        
        currentSoundIndex = (currentSoundIndex + 1) % audioElements.length;
        const selectedAudio = audioElements[currentSoundIndex];

        // Clone the audio to allow multiple instances
        const audioClone = new Audio(selectedAudio.src);
        audioClone.volume = 0.7;

        // console.log('Playing audio:', audioClone.src);

        // Play the sound
        audioClone.play().then(() => {
            // console.log('Audio started playing');
        }).catch((error) => {
            console.log("Audio play failed:", error);
        });

        // Add to playing list
        playingAudios.push(audioClone);

        // Remove from playing list when finished
        audioClone.addEventListener("ended", () => {
            const index = playingAudios.indexOf(audioClone);
            if (index > -1) {
                playingAudios.splice(index, 1);
            }
        });
    }
</script>
